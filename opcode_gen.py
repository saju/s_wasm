#!/usr/bin/env python3

#
# generates opcodes.h
#

preamble = """
#ifndef __OPCODES_H__
#define __OPCODES_H__ 

/*
 * opcodes.h - this file is autogenerated from opcode_gen.py
 *
 * WASM opcodes are 1 byte wide. We generate a table(array) of opcodes that is indexed by the opcode.
 */
struct _instr opcodes[] = {
"""

end = """
};
#endif /* __OPCODES_H__ */
"""

opcodes = []
for idx in range(0xff + 1):
    opcodes.append((hex(idx), "0x0", "unused"))

#
# fill in the opcodes we know about
#
opcodes[0x42] = ("0x42", "NUMERIC", "i32.const", ".num={I32_CONST}")
opcodes[0x43] = ("0x43", "NUMERIC", "i64.const", ".num={I64_CONST}")
opcodes[0x44] = ("0x44", "NUMERIC", "f32.const", ".num={F32_CONST}")
opcodes[0x45] = ("0x45", "NUMERIC", "f64.const", ".num={F64_CONST}")
    

with open('opcodes.h', 'w') as out:
    out.write(preamble)
    for idx in range(0xff + 1):
        if len(opcodes[idx]) == 3:
            (code, subtype, desc) = opcodes[idx]
            out.write("{%s, %s, \"%s\"}," % (code, subtype, desc))
        else:
            (code, subtype, desc, sp) = opcodes[idx]
            out.write("{%s, %s, \"%s\", %s}," % (code, subtype, desc, sp))
    out.write(end)
